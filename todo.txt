done - extend pid to multiple ANNs
adding the plot_position_curves to the test_a_task code (also change its name to test_a_task_fcn)
- comparing with and without FB
- modify the xml file
-- make parameters physically realistic
-- make the system more stable by not letting legs go all the way back
-- modify the range of motions
-- test more muscle force and its effect on maing a difference across environments

'cur3_V5_TD_full_test_fb_1'
PID=10-25-.05
'cur3_V5_TD_full_test_fb_2'
PID=4-5-.05

'cur3_V5_TD_full_test_nonstiff_1'
non stiff - extra DoF - Load density 1000 - 80 seconds babbling (usual)

'cur3_V5_TD_full_test_nonstiff_2'
non stiff - extra DoF - Load density 1000 - 10 secodns babbling

'cur3_V5_TD_full_test_nonstiff_3'
non stiff - extra DoF - Load density 2000 - 10 secodns babbling


'cur3_V5_TD_full_test_nonstiff_modifiedRoM_useACCtest_1'
use_acc=True
normaliz=false (not implemented)

'cur3_V5_TD_full_test_nonstiff_modifiedRoM_useACCtest_2'
use_acc=False
normaliz=false (not implemented)


experiment_ID_base = 'cur4_xmlVer11_TD_V1_testANNstruc'
to test if single is worst than multiple if p2p is not all the same for all legs
'cur3_V5_TD_full_test_nonstiff_modifiedRoM_useACCtest_3'
use_acc=True
normalize=True

'cur3_V5_TD_full_test_nonstiff_modifiedRoM_useACCtest_4'
use_acc=False
normalize=True

cur4_xmlVer11_TD_V2 p2p-> diagonal
cur4_xmlVer11_TD_V3 p2p-> all four limbs the same (ran only p2p)

cur3_V5_TD_test41
testimg a lower frequency (omega=1.5)
cur3_V5_TD_test42
no acc + testimg a lower frequency (omega=1.5)
cur3_V5_TD_test43
with normalization + no acc + testimg a lower frequency (omega=1.5)

cur3_V5_TD_test44
	all_sensory_cases = [True, False]
	all_feedback_cases = [True, False]
	use_acc = False
	normalize = False
	ANN_structures = ["S"]
	number_of_refinements = 4
cur3_V5_TD_test45
	same as 44 but without norm
generalize normalization -> especially in the feedback create_control_kinematics_fcn


'cur3_V5_TD_full_test_nonstiff_modifiedRoM_rigid_4cases_V1'
mc1 failed -> replaced with mc0
mc7 failed -> replaced with mc6
mc11 failed -> replaced with mc10


cur3_V5_TD_full_test_nonstiff_modifiedRoM_rigid_3phases_V2_5_test3:
heavy load extra heavy


'cur4_xmlVer11_TD_V1'#mc1 error -> replaced with MC0 copy => fixed on the next run

calculate and save the mse error values for all kinematics (and not just the rmse for only the joint angles---the first 8 values on the kinemtaics array) too for both the learning (which is also possible to look from the tensorboard figures) and test_a_task function. Note that mse is what I need to calculate for this case and not the rmse since it is a combination of joint angles, angular velocities and angular accelerations and therefore would not have a unit even if we use rmse.
